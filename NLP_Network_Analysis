import re
import numpy as np
import pandas as pd
from pprint import pprint
# Gensim
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel
# spacy for lemmatization
import spacy
# Plotting tools
import pyLDAvis
#import pyLDAvis.gensim #THIS IS OLD, WE NEED TO CHANGE IT TO:
import pyLDAvis.gensim_models as gensimvis
import matplotlib.pyplot as plt
%matplotlib inline


#check out the NLP_preprocessing for details of called functions
bible = "https://www.gutenberg.org/files/10/10-0.txt"
bible_text = download_text(bible)

#We must get rid of the legal disclaimers that are irrelevant to our analysis
def disclaimer_cleaner(text):
  print("Orginal Length of the book is %d" %len(text))
  start = re.search(r'\b(START OF THE PROJECT GUTENBERG EBOOK)\b', text)
  start = start.end()
  end = re.search(r'\b(END OF THE PROJECT GUTENBERG EBOOK)\b', text)
  end = end.start()
  print(start, end)  
  text = text[start:end]
  print("Trimmed Length of the book is %d" %len(text))
  return text

bible_text = disclaimer_cleaner(bible_text)
bible_sentence_list = re.split(r"\d+\:\d+",bible_text)

#set up stopword 
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = stopwords.words('english')
stop_words.extend(['chapter',':'])

#Tokenization using Gensim
bible_words = gensim.utils.simple_preprocess(bible_text,deacc=True)
#Stop word removal
def remove_stopwords(data_words):
  return [word for word in data_words if word not in stop_words]

bible_nostop = remove_stopwords(bible_text)
#print(len(bible_nostop))

def lemmatization(data_words_nostop, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
  text_out = []
  doc = nlp(' '.join(data_words_nostop))
  for token in doc:
    if token.pos_ in allowed_postags:
      text_out.append(token.lemma_)
  return text_out
nlp = spacy.load('en_core_web_sm', disable=['parser', 'ner'])
data_lemmatized = lemmatization(bible_nostop, allowed_postags=['NOUN', 'ADJ', 'VERB'])

#Make a little wordcloud to quickly see how we are doing
from wordcloud import WordCloud, ImageColorGenerator
lemmatized_text = ' '.join(data_lemmatized)
wordcloud = WordCloud().generate(lemmatized_text)
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

#We could also make our wordcloud based on Jesus's image
from skimage import io
from google.colab.patches import cv2_imshow
from PIL import Image
import cv2 as cv
from PIL import Image
url = "https://lh3.googleusercontent.com/proxy/b6zZydCcOcv1OH6BduGiMgFzFCwe1WafdxqsV7zK7fb9_17niopIfRbZZtyJuYE7KfaLmr4kyViq20qImMlQSHzg4GciTV4"
image = io.imread(url)
image = cv.cvtColor(image, cv.COLOR_BGR2RGB)
cv2_imshow(image) 
jesus_mask = np.array(image)

wc = WordCloud(background_color="white", mask=jesus_mask,contour_width=3, contour_color='steelblue')
wc = wc.generate(lemmatized_text)
plt.imshow(wc, interpolation='bilinear')
plt.axis("off")
plt.figure()
plt.imshow(jesus_mask, cmap=plt.cm.gray, interpolation='bilinear')
plt.axis("off")
plt.show()

# Build the bigram and trigram models
bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100) # higher threshold fewer phrases.
trigram = gensim.models.Phrases(bigram[data_words], threshold=100)  

# Faster way to get a sentence clubbed as a trigram/bigram
bigram_mod = gensim.models.phrases.Phraser(bigram)
trigram_mod = gensim.models.phrases.Phraser(trigram)

# See trigram example
print(trigram_mod[bigram_mod[data_words[0]]])

# Define functions for stopwords, bigrams, trigrams and lemmatization
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    """https://spacy.io/api/annotation"""
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

# Remove Stop Words
data_words_nostops = remove_stopwords(data_words)

# Form Bigrams
data_words_bigrams = make_bigrams(data_words_nostops)

# Initialize spacy 'en' model, keeping only tagger component (for efficiency)
# python3 -m spacy download en
nlp = spacy.load('en_core_web_sm', disable=['parser', 'ner'])

# Do lemmatization keeping only noun, adj, vb, adv
data_lemmatized = lemmatization(data_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

print(data_lemmatized[:50])

# Create Dictionary
id2word = corpora.Dictionary(data_lemmatized)

# Create Corpus
texts = data_lemmatized

# Term Document Frequency
corpus = [id2word.doc2bow(text) for text in texts]

# View
print(corpus[:1])

# Build LDA model
lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=2, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)
                                           
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]

# Compute Perplexity
print('\nPerplexity: ', lda_model.log_perplexity(corpus))  # a measure of how good the model is. lower the better.

# Compute Coherence Score
coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_lda = coherence_model_lda.get_coherence()
print('\nCoherence Score: ', coherence_lda)

def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=3):
    """
    Compute c_v coherence for various number of topics

    Parameters:
    ----------
    dictionary : Gensim dictionary
    corpus : Gensim corpus
    texts : List of input texts
    limit : Max num of topics

    Returns:
    -------
    model_list : List of LDA topic models
    coherence_values : Coherence values corresponding to the LDA model with respective number of topics
    """
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=num_topics, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)
        model_list.append(lda_model)
        coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
        coherence_lda = coherence_model_lda.get_coherence()
        coherence_values.append(coherence_lda)

    return model_list, coherence_values
   
   model_list, coherence_values = compute_coherence_values(dictionary=id2word, corpus=corpus, texts=data_lemmatized, start=2, limit=20, step=6)
   # Show graph
limit=20; start=2; step=6;
x = range(start, limit, step)
plt.plot(x, coherence_values)
plt.xlabel("Num Topics")
plt.ylabel("Coherence score")
plt.legend(("coherence_values"), loc='best')
plt.show()
